from vosk import Model, KaldiRecognizer, SetLogLevel, SpkModel
import sys
import os
import wave
import json
import numpy as np
from utils.files import pickle_dump

SetLogLevel(0)
path = '/media/aleksander/hd2/data/hackthehack/rbk/out.wav'

wf = wave.open(path, "rb")
if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getcomptype() != "NONE":
    print("Audio file must be WAV format mono PCM.")
    exit(1)

model = Model("models/vosk-model-small-ru-0.22")
rec = KaldiRecognizer(model, wf.getframerate())
spk_model = SpkModel("models/vosk-model-spk-0.4")

rec.SetSpkModel(spk_model)
# rec.SetMaxAlternatives(10)
rec.SetWords(True)
# spk_sig = [-1.110417,0.09703002,1.35658,0.7798632,-0.305457,-0.339204,0.6186931,-0.4521213,0.3982236,-0.004530723,0.7651616,0.6500852,-0.6664245,0.1361499,0.1358056,-0.2887807,-0.1280468,-0.8208137,-1.620276,-0.4628615,0.7870904,-0.105754,0.9739769,-0.3258137,-0.7322628,-0.6212429,-0.5531687,-0.7796484,0.7035915,1.056094,-0.4941756,-0.6521456,-0.2238328,-0.003737517,0.2165709,1.200186,-0.7737719,0.492015,1.16058,0.6135428,-0.7183084,0.3153541,0.3458071,-1.418189,-0.9624157,0.4168292,-1.627305,0.2742135,-0.6166027,0.1962581,-0.6406527,0.4372789,-0.4296024,0.4898657,-0.9531326,-0.2945702,0.7879696,-1.517101,-0.9344181,-0.5049928,-0.005040941,-0.4637912,0.8223695,-1.079849,0.8871287,-0.9732434,-0.5548235,1.879138,-1.452064,-0.1975368,1.55047,0.5941782,-0.52897,1.368219,0.6782904,1.202505,-0.9256122,-0.9718158,-0.9570228,-0.5563112,-1.19049,-1.167985,2.606804,-2.261825,0.01340385,0.2526799,-1.125458,-1.575991,-0.363153,0.3270262,1.485984,-1.769565,1.541829,0.7293826,0.1743717,-0.4759418,1.523451,-2.487134,-1.824067,-0.626367,0.7448186,-1.425648,0.3524166,-0.9903384,3.339342,0.4563958,-0.2876643,1.521635,0.9508078,-0.1398541,0.3867955,-0.7550205,0.6568405,0.09419366,-1.583935,1.306094,-0.3501927,0.1794427,-0.3768163,0.9683866,-0.2442541,-1.696921,-1.8056,-0.6803037,-1.842043,0.3069353,0.9070363,-0.486526]
spk_sig = [-1.529021, -0.756291, 0.633436, 0.308641, -0.272487, 0.29704, 0.508834, 0.371013, -0.077126, 0.813707,
           0.174715, -0.353313, -1.223932, -0.04151, -1.247327, 1.415818, -0.535523, 0.823077, -1.002912, -1.0865,
           -0.952444, 1.735218, 1.170908, 0.274975, -0.04661, 0.911304, -0.52059, -0.080152, 0.228461, 1.68673,
           -1.301953, -0.332756, -0.876567, 0.267812, 0.834645, 2.287266, 2.074439, -0.171599, -1.291149, 0.949506,
           -1.276906, 1.866328, 0.455417, -1.198857, -0.668583, 0.348712, -1.314091, 0.491435, 0.441045, 1.512778,
           2.492309, 0.204201, -2.703876, 0.447603, -1.21849, -1.790868, 0.903006, -1.140448, 2.618379, -0.898671,
           -0.624289, -0.702894, -0.48731, 0.545611, 0.778515, -1.288735, -0.811159, 0.033319, -0.074401, -0.11585,
           1.151731, 0.74437, 1.453931, 0.88278, 0.938768, 0.093107, -0.020434, -1.00466, 0.855693, -0.117168,
           -0.360945, 0.376148, 0.315807, -0.49832, 0.152079, 1.177055, 0.192705, 0.627158, -1.122317, -0.806564,
           -0.662994, 0.210457, -0.760291, -1.459997, -0.104382, -0.039617, 0.185324, 1.099118, -2.469615, 1.850034,
           1.294009, 0.244769, -1.252954, 0.281, -0.928059, -1.095386, 0.805227, -0.751558, 0.07457, -0.127285,
           -1.200899, -1.161451, -0.357828, -0.498058, 1.037826, -1.288099, 0.331015, -0.635576, 1.021831, -0.298753,
           -0.55867, 1.20902, -0.646348, 0.988511, 0.907299, -1.052433, 0.235938, -0.794417]
frame_rate = 16000


def cosine_dist(x, y):
    nx = np.array(x)
    ny = np.array(y)
    return 1 - np.dot(nx, ny) / np.linalg.norm(nx) / np.linalg.norm(ny)


all_speakers = list()

tot_proc_frames = 0
while True:
    data = wf.readframes(frame_rate * 4)
    print(len(data))
    if len(data) == 0:
        break
    if rec.AcceptWaveform(data):
        res = json.loads(rec.Result())

        print("Text:", res['text'])
        print(res)
        if 'spk' in res:
            print("X-vector:", res['spk'])
            print("Speaker distance:", cosine_dist(spk_sig, res['spk']), "based on", res['spk_frames'], "frames")
            all_speakers.append(res['spk'])
        print(json.loads(rec.Result()))
    else:
        print(json.loads(rec.PartialResult()))

print(json.loads(rec.FinalResult()))
pickle_dump(all_speakers,'speakers.gz.mdl')
